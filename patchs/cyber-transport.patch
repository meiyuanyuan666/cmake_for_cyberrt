diff --git a/cyber/transport/rtps/attributes_filler.cc b/cyber/transport/rtps/attributes_filler.cc
index 411e12df7d..63b2236206 100644
--- a/cyber/transport/rtps/attributes_filler.cc
+++ b/cyber/transport/rtps/attributes_filler.cc
@@ -35,7 +35,7 @@ bool AttributesFiller::FillInPubAttr(
 
   pub_attr->topic.topicName = channel_name;
   pub_attr->topic.topicDataType = "UnderlayMessage";
-  pub_attr->topic.topicKind = eprosima::fastrtps::NO_KEY;
+  pub_attr->topic.topicKind = eprosima::fastrtps::rtps::NO_KEY;
 
   switch (qos.history()) {
     case QosHistoryPolicy::HISTORY_KEEP_LAST:
@@ -88,7 +88,7 @@ bool AttributesFiller::FillInPubAttr(
   // transform messages per second to rtps heartbeat
   // set default heartbeat period
   pub_attr->times.heartbeatPeriod.seconds = 1;
-  pub_attr->times.heartbeatPeriod.fraction = 0;
+  pub_attr->times.heartbeatPeriod.nanosec = 0;
   if (qos.mps() != 0) {
     uint64_t mps = qos.mps();
 
@@ -104,13 +104,13 @@ bool AttributesFiller::FillInPubAttr(
     int32_t seconds = static_cast<int32_t>(fractions >> 32);
 
     pub_attr->times.heartbeatPeriod.seconds = seconds;
-    pub_attr->times.heartbeatPeriod.fraction = fraction;
+    pub_attr->times.heartbeatPeriod.nanosec = fraction;
   }
 
   pub_attr->qos.m_publishMode.kind =
       eprosima::fastrtps::ASYNCHRONOUS_PUBLISH_MODE;
   pub_attr->historyMemoryPolicy =
-      eprosima::fastrtps::DYNAMIC_RESERVE_MEMORY_MODE;
+      eprosima::fastrtps::rtps::DYNAMIC_RESERVE_MEMORY_MODE;
   pub_attr->topic.resourceLimitsQos.max_samples = 10000;
 
   return true;
@@ -122,7 +122,7 @@ bool AttributesFiller::FillInSubAttr(
   RETURN_VAL_IF_NULL(sub_attr, false);
   sub_attr->topic.topicName = channel_name;
   sub_attr->topic.topicDataType = "UnderlayMessage";
-  sub_attr->topic.topicKind = eprosima::fastrtps::NO_KEY;
+  sub_attr->topic.topicKind = eprosima::fastrtps::rtps::NO_KEY;
 
   switch (qos.history()) {
     case QosHistoryPolicy::HISTORY_KEEP_LAST:
@@ -173,7 +173,7 @@ bool AttributesFiller::FillInSubAttr(
   }
 
   sub_attr->historyMemoryPolicy =
-      eprosima::fastrtps::DYNAMIC_RESERVE_MEMORY_MODE;
+      eprosima::fastrtps::rtps::DYNAMIC_RESERVE_MEMORY_MODE;
   sub_attr->topic.resourceLimitsQos.max_samples = 10000;
 
   return true;
diff --git a/cyber/transport/rtps/participant.cc b/cyber/transport/rtps/participant.cc
index 169ac486ae..f5eefd916f 100644
--- a/cyber/transport/rtps/participant.cc
+++ b/cyber/transport/rtps/participant.cc
@@ -84,16 +84,16 @@ void Participant::CreateFastRtpsParticipant(
   }
 
   eprosima::fastrtps::ParticipantAttributes attr;
-  attr.rtps.defaultSendPort = send_port;
+  // attr.rtps.defaultSendPort = send_port; // unused
   attr.rtps.port.domainIDGain =
       static_cast<uint16_t>(part_attr_conf->domain_id_gain());
   attr.rtps.port.portBase = static_cast<uint16_t>(part_attr_conf->port_base());
-  attr.rtps.use_IP6_to_send = false;
-  attr.rtps.builtin.use_SIMPLE_RTPSParticipantDiscoveryProtocol = true;
-  attr.rtps.builtin.use_SIMPLE_EndpointDiscoveryProtocol = true;
-  attr.rtps.builtin.m_simpleEDP.use_PublicationReaderANDSubscriptionWriter =
+  // attr.rtps.use_IP6_to_send = false;
+  // attr.rtps.builtin.discovery_config.use_SIMPLE_RTPSParticipantDiscoveryProtocol = true;
+  attr.rtps.builtin.discovery_config.use_SIMPLE_EndpointDiscoveryProtocol = true;
+  attr.rtps.builtin.discovery_config.m_simpleEDP.use_PublicationReaderANDSubscriptionWriter =
       true;
-  attr.rtps.builtin.m_simpleEDP.use_PublicationWriterANDSubscriptionReader =
+  attr.rtps.builtin.discovery_config.m_simpleEDP.use_PublicationWriterANDSubscriptionReader =
       true;
   attr.rtps.builtin.domainId = domain_id;
 
@@ -103,8 +103,8 @@ void Participant::CreateFastRtpsParticipant(
    * cause the failure of the writer liveliness assertion in networks with high
    * latency or with lots of communication errors.
    */
-  attr.rtps.builtin.leaseDuration.seconds = part_attr_conf->lease_duration();
-  attr.rtps.builtin.leaseDuration_announcementperiod.seconds =
+  attr.rtps.builtin.discovery_config.leaseDuration.seconds = part_attr_conf->lease_duration();
+  attr.rtps.builtin.discovery_config.leaseDuration_announcementperiod.seconds =
       part_attr_conf->announcement_period();
 
   attr.rtps.setName(name.c_str());
@@ -122,15 +122,17 @@ void Participant::CreateFastRtpsParticipant(
 
   eprosima::fastrtps::rtps::Locator_t locator;
   locator.port = 0;
-  RETURN_IF(!locator.set_IP4_address(ip_env));
+  // RETURN_IF(!locator.set_IP4_address(ip_env));
+  RETURN_IF(!eprosima::fastrtps::rtps::IPLocator::setIPv4(locator, ip_env.c_str()) );
 
   locator.kind = LOCATOR_KIND_UDPv4;
 
   attr.rtps.defaultUnicastLocatorList.push_back(locator);
-  attr.rtps.defaultOutLocatorList.push_back(locator);
+  // attr.rtps.defaultOutLocatorList.push_back(locator);
   attr.rtps.builtin.metatrafficUnicastLocatorList.push_back(locator);
 
-  locator.set_IP4_address(239, 255, 0, 1);
+  // locator.set_IP4_address(239, 255, 0, 1);
+  RETURN_IF(!eprosima::fastrtps::rtps::IPLocator::setIPv4(locator, 239, 255, 0, 1) );
   attr.rtps.builtin.metatrafficMulticastLocatorList.push_back(locator);
 
   fastrtps_participant_ =
diff --git a/cyber/transport/rtps/sub_listener.cc b/cyber/transport/rtps/sub_listener.cc
index e623f5b69b..a0f40f6b72 100644
--- a/cyber/transport/rtps/sub_listener.cc
+++ b/cyber/transport/rtps/sub_listener.cc
@@ -34,12 +34,12 @@ void SubListener::onNewDataMessage(eprosima::fastrtps::Subscriber* sub) {
   std::lock_guard<std::mutex> lock(mutex_);
 
   // fetch channel name
-  auto channel_id = common::Hash(sub->getAttributes().topic.getTopicName());
+  auto channel_id = common::Hash(sub->getAttributes().topic.getTopicName().to_string());
   eprosima::fastrtps::SampleInfo_t m_info;
   UnderlayMessage m;
 
   RETURN_IF(!sub->takeNextData(reinterpret_cast<void*>(&m), &m_info));
-  RETURN_IF(m_info.sampleKind != eprosima::fastrtps::ALIVE);
+  RETURN_IF(m_info.sampleKind != eprosima::fastrtps::rtps::ALIVE);
 
   // fetch MessageInfo
   char* ptr =
@@ -67,7 +67,7 @@ void SubListener::onNewDataMessage(eprosima::fastrtps::Subscriber* sub) {
 
 void SubListener::onSubscriptionMatched(
     eprosima::fastrtps::Subscriber* sub,
-    eprosima::fastrtps::MatchingInfo& info) {
+    eprosima::fastrtps::rtps::MatchingInfo& info) {
   (void)sub;
   (void)info;
 }
diff --git a/cyber/transport/rtps/sub_listener.h b/cyber/transport/rtps/sub_listener.h
index fc16abf62f..89813e5a3d 100644
--- a/cyber/transport/rtps/sub_listener.h
+++ b/cyber/transport/rtps/sub_listener.h
@@ -49,7 +49,7 @@ class SubListener : public eprosima::fastrtps::SubscriberListener {
 
   void onNewDataMessage(eprosima::fastrtps::Subscriber* sub);
   void onSubscriptionMatched(eprosima::fastrtps::Subscriber* sub,
-                             eprosima::fastrtps::MatchingInfo& info);  // NOLINT
+                             eprosima::fastrtps::rtps::MatchingInfo& info);  // NOLINT
 
  private:
   NewMsgCallback callback_;
diff --git a/cyber/transport/rtps/underlay_message_type.cc b/cyber/transport/rtps/underlay_message_type.cc
index 8af2601fd3..e572562fa4 100644
--- a/cyber/transport/rtps/underlay_message_type.cc
+++ b/cyber/transport/rtps/underlay_message_type.cc
@@ -47,7 +47,7 @@ UnderlayMessageType::~UnderlayMessageType() {
   }
 }
 
-bool UnderlayMessageType::serialize(void* data, SerializedPayload_t* payload) {
+bool UnderlayMessageType::serialize(void* data, eprosima::fastrtps::rtps::SerializedPayload_t* payload) {
   UnderlayMessage* p_type = reinterpret_cast<UnderlayMessage*>(data);
   eprosima::fastcdr::FastBuffer fastbuffer(
       reinterpret_cast<char*>(payload->data),
@@ -66,7 +66,7 @@ bool UnderlayMessageType::serialize(void* data, SerializedPayload_t* payload) {
   return true;
 }
 
-bool UnderlayMessageType::deserialize(SerializedPayload_t* payload,
+bool UnderlayMessageType::deserialize(eprosima::fastrtps::rtps::SerializedPayload_t* payload,
                                       void* data) {
   UnderlayMessage* p_type = reinterpret_cast<UnderlayMessage*>(
       data);  // Convert DATA to pointer of your type
@@ -102,7 +102,7 @@ void UnderlayMessageType::deleteData(void* data) {
   delete (reinterpret_cast<UnderlayMessage*>(data));
 }
 
-bool UnderlayMessageType::getKey(void* data, InstanceHandle_t* handle) {
+bool UnderlayMessageType::getKey(void* data, eprosima::fastrtps::rtps::InstanceHandle_t* handle, bool force_md5) {
   RETURN_VAL_IF((!m_isGetKeyDefined), false);
   UnderlayMessage* p_type = reinterpret_cast<UnderlayMessage*>(data);
   eprosima::fastcdr::FastBuffer fastbuffer(
diff --git a/cyber/transport/rtps/underlay_message_type.h b/cyber/transport/rtps/underlay_message_type.h
index 01db00120b..e9ef0585de 100644
--- a/cyber/transport/rtps/underlay_message_type.h
+++ b/cyber/transport/rtps/underlay_message_type.h
@@ -35,10 +35,10 @@ class UnderlayMessageType : public eprosima::fastrtps::TopicDataType {
 
   UnderlayMessageType();
   virtual ~UnderlayMessageType();
-  bool serialize(void* data, SerializedPayload_t* payload);
-  bool deserialize(SerializedPayload_t* payload, void* data);
+  bool serialize(void* data, eprosima::fastrtps::rtps::SerializedPayload_t* payload);
+  bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t* payload, void* data);
   std::function<uint32_t()> getSerializedSizeProvider(void* data);
-  bool getKey(void* data, InstanceHandle_t* ihandle);
+  bool getKey(void* data, eprosima::fastrtps::rtps::InstanceHandle_t* ihandle, bool force_md5 = false);
   void* createData();
   void deleteData(void* data);
   MD5 m_md5;
